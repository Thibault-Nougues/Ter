/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pc.src;
import java.util.ArrayList;


/**
 *
 * @author keke
 */
public class Case implements Comparable<Case>{
    private boolean dejaVisite, isFinal, isDepart;
    private int murs;
    private int x, y;
    private int poids;
    private int direction;

    public Case(int posX, int posY){
        dejaVisite = isFinal = isDepart = false;
        murs = direction = 0;
        poids = 100;
        x = posX;
        y = posY;
    }
    //Constructeur par copie
    public Case(Case c){
        dejaVisite = c.dejaVisite;
        isDepart = c.isDepart;
        isFinal = c.isFinal;
        murs = c.murs;
        direction = c.direction;
        poids = c.poids;
        x = c.x;
        y = c.y;
    }

    /* GETTERS */
    public int getX(){
        return x;
    }

    public int getY(){
        return y;
    }

    public boolean getVisite(){
        return dejaVisite;
    }
    @Override
    public String toString() {
        return x + "/" + y + " : p=" + poids + " | dir=" + direction + " | visite=" + dejaVisite;
    }
    public int getDirection(){
        return direction;
    }
    
    public boolean getDepart(){
        return isDepart;
    }
    
    public boolean getFinal(){
        return isFinal;
    }

    public boolean getMur(int direction){
        switch(direction){
            case NORTH : return (murs & NORTH) == NORTH;
            case SOUTH : return (murs & SOUTH) == SOUTH;
            case EAST : return (murs & EAST) == EAST;
            case WEST : return (murs & WEST) == WEST;
            default: return false;
        }
    }

    public int getMurs(){
        return murs;
    }
    
    public int getPoids(){
        return poids;
    }

    public boolean estObstacle(){
        return (murs & NORTH) == NORTH &&
                (murs & EAST) == EAST &&
                (murs & SOUTH) == SOUTH &&
                (murs & WEST) == WEST;
    }
    
    /* SETTER */
    public int setX(int val){
        return x=val;
    }

    public int setY(int val){
        return y=val;
    }
    
    public void setVisite(boolean b){
        dejaVisite = b;
    }    
    
    public void addMur(int direction){
        murs = murs | direction;
    }

    public void setObstacle(){
        murs = NORTH+WEST+SOUTH+EAST;
    }
    
    public void setDepart(){
        isDepart = true;
    }
    
    public void setFinal(){
        isFinal = true;
        poids = 0;
    }

    public void setPoids(int newPoids, int newDirection){
        poids = newPoids;
        direction = newDirection;
    }
    
    public void setDirection(int newDirection){
        direction = newDirection;
    }

    /*Méthodes pour l'algorithme A* */

    public int directionOppose(int direction){
        // si trajectoires perpendiculaires
        switch(direction){
            case NORTH : return SOUTH;
            case SOUTH : return NORTH;
            case EAST : return WEST;
            case WEST : return EAST;
            default: return 0;
        }
    }
    
    public boolean directionOppose(Case caseCourante){
        // si trajectoires perpendiculaires
        switch(direction){
            case NORTH : return caseCourante.getDirection() == SOUTH;
            case SOUTH : return caseCourante.getDirection() == NORTH;
            case EAST : return caseCourante.getDirection() == WEST;
            case WEST : return caseCourante.getDirection() == EAST;
            default: return true;
        }
    }

    public boolean memeTrajectoire(int direction){
        return this.direction == direction || 
                this.direction == directionOppose(direction);
    }

    public ArrayList<Integer> directionsPossible(int direction){
        ArrayList<Integer> directions = new ArrayList();
        if((murs & direction) != direction && direction != 0){
            directions.add(direction);
        }
        //cas du tunnel
        if(((murs & NORTH) == NORTH && (murs & SOUTH) == SOUTH ) ||
                ((murs & EAST) == EAST && (murs & WEST) == WEST)){
            return directions;
        }
        else{
            // test de toutes les directions
            if((murs & NORTH) == NORTH && direction != NORTH){
                directions.add(SOUTH);
            }
            if((murs & EAST) == EAST && direction != EAST){
                directions.add(WEST);
            }
            if((murs & SOUTH) == SOUTH && direction != SOUTH){
                directions.add(NORTH);
            }
            if((murs & WEST) == WEST && direction != WEST){
                directions.add(EAST);
            }
        }

        // retour des directions opposées aux obstacles
        return directions;
    }

    public boolean finTrajectoire(){
        return (murs & direction) == direction;
    }
    
    @Override
    public boolean equals(Object other){
        
        System.out.println("*********Méthode equals appelé");
        if (other == null) return false;
        if (other == this) return true;
        if (!(other instanceof Case))return false;
        Case caseTmp = (Case)other;
        System.out.println("Fin Méthode equals : retour " + (x == caseTmp.x && 
                y == caseTmp.y && this.memeTrajectoire(caseTmp.direction)));
        return x == caseTmp.x && y == caseTmp.y && this.memeTrajectoire(caseTmp.direction);
    }
    
    @Override
    public int compareTo(Case o) {
        int retour = 1;
        
        System.out.println("\tCase courante => " + this + " comparé à");
        System.out.println("\t" + o);
        if(o.direction == 0 || direction == 0){
            if(direction == 0) retour = -1;
            System.out.println("\tGET : comparaison des coordonnées");
            if(x==o.x && y==o.y)retour = 0;
        }        
        else if((o.dejaVisite || dejaVisite)){
            if(dejaVisite) retour = -1;
            System.out.println("\tREMOVE : comparaison de la direction");
            if(x==o.x && y==o.y && direction == o.direction)retour = 0;
        }
        else{
            System.out.println("\tPUT ou cas habituel: comparaison de tout");
            retour = (x==o.x && y==o.y && direction == o.direction && poids - o.poids != 0) ? poids - o.poids : 1;
        }
        System.out.println("\tRETOUR = " + retour);
        return retour;
    }
}
